#!/bin/bash

set -e

if [[ "$BASHPID" == "" ]]; then
  # Workaround for old versions of bash
  BASHPID=$$
fi

####### Functions ####################

function KillByPgidFile {
  PGIDFILE=$1
  pkill -g $(cat $PGIDFILE)
}

function StatusForPidFile {
  PIDFILE=$1
  if [ -f $PIDFILE ]; then
    PID=$(cat $PIDFILE)
    T=$(ps --pid $PID | wc -l)
    if [[ "$T" == 2 ]]; then
      echo "RUNNING"
      exit 0
    fi
  fi
  echo "NOT-RUNNING"
  exit 0
}

function BrokerStart {
  # Log the process ID of the script.
  echo $$ > $JOBDIR/broker.pid
  # Log the process group ID if possible.
  if [[ -d /proc ]]; then
    # Get current script's PGID
    echo $(ps -p $BASHPID h -o pgid) > $JOBDIR/broker.pgid
    # Kill the command with
    #   pkill -g $(cat $JOBDIR/broker.pgid)
    # Note: this does not work on OSX.
  fi

  # Decrease our priority.
  renice 10 $$

  # Run the worker, relaunching if it dies with an error.
  ALIVE=1
  while [[ "$ALIVE" == 1 ]]; do
    # This is a hackish way to communicate a restart signal from the ipython engine to the wrapper script.
    # Note that all engines on this host write to the same file (thus creating it multiple times), which is fine.
    rm -f $JOBDIR/restart
    # Start the broker
    $BROKER_CMD
    echo "GLIMPSE-CLUSTER-WRAPPER: broker command exited." 1>&2
    if [ -e $JOBDIR/restart ]; then
      echo "GLIMPSE-CLUSTER-WRAPPER: caught restart signal, restarting..." 1>&2
      sleep 1
    else
      echo "GLIMPSE-CLUSTER-WRAPPER: quiting." 1>&2
      ALIVE=0
    fi
  done 1>$JOBDIR/broker.log 2>$JOBDIR/broker.err
}

function IPythonWorkerStart {
  # Log the process ID of the script.
  echo $$ > $JOBDIR/$NUM.pid
  # Log the process group ID if possible.
  if [[ -d /proc ]]; then
    # Get current script's PGID
    echo $(ps -p $BASHPID h -o pgid) > $JOBDIR/$NUM.pgid
    # Kill the command with
    #   pkill -g $(cat $JOBDIR/$NUM.pgid)
    # Note: this does not work on OSX.
  fi

  # Decrease our priority.
  renice 10 $$

  # Run the worker, relaunching if it dies with an error.
  ALIVE=1
  while [[ "$ALIVE" == 1 ]]; do
    # This is a hackish way to communicate a restart signal from the ipython engine to the wrapper script.
    # Note that all engines on this host write to the same file (thus creating it multiple times), which is fine.
    rm -f $JOBDIR/restart
    # Start the worker(s)
    $WORKER_CMD
    echo "GLIMPSE-CLUSTER-WRAPPER: worker command exited." 1>&2
    if [ -e $JOBDIR/restart ]; then
      echo "GLIMPSE-CLUSTER-WRAPPER: caught restart signal, restarting..." 1>&2
      sleep 1
    else
      echo "GLIMPSE-CLUSTER-WRAPPER: quiting." 1>&2
      ALIVE=0
    fi
  done 1>$JOBDIR/$NUM.log 2>$JOBDIR/$NUM.err
}

function WorkerStart {
  # Log the process ID of the script.
  echo $$ > $JOBDIR/$NUM.pid
  # Log the process group ID if possible.
  if [[ -d /proc ]]; then
    # Get current script's PGID
    echo $(ps -p $BASHPID h -o pgid) > $JOBDIR/$NUM.pgid
    # Kill the command with
    #   pkill -g $(cat $JOBDIR/$NUM.pgid)
    # Note: this does not work on OSX.
  fi

  # Decrease our priority.
  renice 10 $$

  # Truncate logs files
  echo -n "" > $JOBDIR/$NUM.log
  echo -n "" > $JOBDIR/$NUM.err

  # Run the worker, relaunching if it dies with an error.
  until $WORKER_CMD 1>>$JOBDIR/$NUM.log 2>>$JOBDIR/$NUM.err; do
    echo "GLIMPSE-CLUSTER-WRAPPER: worker command exited with status $?, restarting.." >> $JOBDIR/$NUM.err
    sleep 1
  done
}

####### Command-line Parsing ####################

if [[ "$#" < 1 ]]; then
  echo "usage: $0 [BROKER|WORKER]" 1>&2
  exit -1
fi
MOD=$1
CMD=$2
NUM=1
NUM_PROCS=  # number of processes to run per worker
if [[ "$#" > 2 ]]; then
  NUM=$3
fi
if [[ "$#" > 3 ]]; then
  NUM_PROCS=$4
fi
GLIMPSE_HOME=$(dirname $0)/..
HOST=$(hostname -f)
cd $GLIMPSE_HOME

# Set the type of worker and broker (one of ipython, gearman, or zmq)
if [[ "$GLIMPSE_CLUSTER_TYPE" == "" ]]; then
  GLIMPSE_CLUSTER_TYPE=ipython
fi
export GLIMPSE_CLUSTER_TYPE
if [[ "$VERBOSE" != "" ]]; then
  VERBOSE="-v"
fi
# The glimpse-cluster script has a hard-coded path to a python interpreter (the
# interpreter used when installing glimpse). This causes problems when using
# glimpse-cluster on NFS shares when different nodes use different Python
# versions. Here, we fix this by using whatever Python interpreter is on the
# path.
GCLUSTER=$(which glimpse-cluster)
if [[ "$GLIMPSE_CLUSTER_TYPE" == ipython ]]; then
  if [[ "$IPYTHON_PROFILE" != "" ]]; then
    IPYTHON_PROFILE="--profile=$IPYTHON_PROFILE"
  fi
  BROKER_CMD="ipcontroller $IPYTHON_PROFILE --reuse"
  WORKER_CMD="ipcluster engines $IPYTHON_PROFILE"
  WORKER_FUNC=IPythonWorkerStart
elif [[ "$GLIMPSE_CLUSTER_TYPE" == gearman ]]; then
#  BROKER_CMD="gearmand -vvvvvvvvvvv -l $GLIMPSE_HOME/run/glimpse-cluster/belmont.cs.pdx.edu/broker.gearmand.log -d"
  BROKER_CMD="python $GCLUSTER $VERBOSE LaunchBroker"
  WORKER_CMD="python $GCLUSTER $VERBOSE LaunchWorker $NUM_PROCS"
  WORKER_FUNC=WorkerStart
elif [[ "$GLIMPSE_CLUSTER_TYPE" == zmq ]]; then
  BROKER_CMD="python $GCLUSTER $VERBOSE LaunchBroker"
  WORKER_CMD="python $GCLUSTER $VERBOSE LaunchWorker $NUM_PROCS"
  WORKER_FUNC=WorkerStart
else
  echo "unknown cluster type: $GLIMPSE_CLUSTER_TYPE" 1>&2
  exit -1
fi

if [[ "$MOD" == "BROKER" ]]; then
  if [[ "$#" < 2 ]]; then
    echo "usage: $0 BROKER START|KILL|STATUS" 1>&2
    exit -1
  fi
  CMD=$2
  JOBDIR=run/glimpse-cluster/${HOST}
  mkdir -p $JOBDIR
  if [[ "$CMD" == "START" ]]; then
    $BASH_SOURCE BROKER START-INNER 1>$JOBDIR/broker-launcher.log 2>$JOBDIR/broker-launcher.err &
  elif [[ "$CMD" == "START-INNER" ]]; then
    BrokerStart
  elif [[ "$CMD" == "KILL" ]]; then
    KillByPgidFile $JOBDIR/broker.pgid
  elif [[ "$CMD" == "STATUS" ]]; then
    StatusForPidFile $JOBDIR/broker.pid
  else
    echo "Unknown $MOD command: $CMD" 1>&2
    exit -1
  fi

elif [[ "$MOD" == "WORKER" ]]; then
  if [[ "$#" < 2 ]]; then
    echo "usage: $0 WORKER START|KILL|STATUS [RUN-NUM]" 1>&2
    exit -1
  fi
  JOBDIR=run/glimpse-cluster/${HOST}/workers
  mkdir -p $JOBDIR
  if [[ "$CMD" == "START" ]]; then
    $BASH_SOURCE WORKER START-INNER $NUM $NUM_PROCS 1>$JOBDIR/$NUM-launcher.log 2>$JOBDIR/$NUM-launcher.err &
  elif [[ "$CMD" == "START-INNER" ]]; then
    $WORKER_FUNC
  elif [[ "$CMD" == "KILL" ]]; then
    KillByPgidFile $JOBDIR/$NUM.pgid
  elif [[ "$CMD" == "STATUS" ]]; then
    StatusForPidFile $JOBDIR/$NUM.pid
  else
    echo "Unknown $MOD command: $CMD" 1>&2
    exit -1
  fi

else
  echo "Unknown module: $MOD" 1>&2
  exit -1
fi
